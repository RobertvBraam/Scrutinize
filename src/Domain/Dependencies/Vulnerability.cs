namespace Domain.Vulnerabilities;

public class Vulnerability
{
    internal Vulnerability(string range, string severity, string source)
    {
        Range = range;
        Severity = severity;
        Source = source;
    }
    
    public string Range { get; private set; }

    public bool IsVersionIncludedInRange(string version)
    {
        var cleanedVersion = version.Replace(".", "");
        var cleanedRange = Range.Replace(".", "");
        if (Range.Contains(">="))
        {
            return int.Parse(cleanedVersion) >= int.Parse(cleanedRange.Substring(2));
        }
        if (Range.Contains(">"))
        {
            return int.Parse(cleanedVersion) > int.Parse(cleanedRange.Substring(1));
        }
        if (Range.Contains("<="))
        {
            return int.Parse(cleanedVersion) <= int.Parse(cleanedRange.Substring(2));
        }
        if (Range.Contains("<"))
        {
            return int.Parse(cleanedVersion) < int.Parse(cleanedRange.Substring(1));
        }
        if (Range.Contains(" - "))
        {
            var split = Range.Split(" - ");
            return int.Parse(split[0].Substring(1)) <= int.Parse(cleanedVersion) && int.Parse(split[1].Substring(1)) >= int.Parse(cleanedVersion);
        }
        
        return cleanedVersion == cleanedRange;
    }
    
    public string Severity { get; private set; }
    public string Source { get; private set; }
}