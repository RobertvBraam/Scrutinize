using System.Diagnostics;
using System.Text.Json;
using Domain;
using Domain.Dependencies;
using Domain.Results;
using Domain.Vulnerabilities;

namespace Scanning.Npm.Vulnerabilities;

public class VulnerabilityScanning : IVulnerabilities
{
    private readonly bool _isWindows;
    private readonly ILogger<VulnerabilityScanning> _logger;
    private const string Filename = "npmVulnerabilities.json";

    public VulnerabilityScanning(bool isWindows, ILogger<VulnerabilityScanning> logger)
    {
        _isWindows = isWindows;
        _logger = logger;
    }

    public Result<List<Dependency>> Scan(string sourcePath)
    {
        if (!Directory.Exists(sourcePath))
        {
            return Result<List<Dependency>>.Failed(InitializationFailed.Create());
        }
        var filePath = $"{sourcePath}/{Filename}";
        var process = StartCmdProcess(sourcePath);
        
        _logger.Information("Vulnerability check process started.");
        process.StandardInput.WriteLine("npm i");
        process.StandardInput.WriteLine($"npm audit --registry=https://registry.npmjs.org/ --json > {filePath}");
        process.StandardInput.WriteLine("exit");
        process.WaitForExit();
        _logger.Information("Vulnerability check process finished.");

        if (File.Exists(filePath))
        {
            var fileStream = File.OpenText(filePath);
            var file = fileStream.ReadToEnd();
            var records = JsonSerializer.Deserialize<NpmVulnerabilities>(file, new JsonSerializerOptions()
            {
                PropertyNameCaseInsensitive = true
            })  ?? new NpmVulnerabilities(new Dictionary<string, NpmVulnerability>());
            _logger.Information($"{records.Vulnerabilities.Count} Vulnerability records deserialized.");
            
            var dependencies = records.ToDependencies().ToList();
            _logger.Information($"{dependencies.Count} Vulnerabilities found.");

            foreach (var dependency in dependencies)
            {
                foreach (var vulnerability in dependency.Vulnerabilities)
                {
                    _logger.Information($"- {dependency.Name} {vulnerability.Severity} {vulnerability.Range}");
                }
            }

            return Result<List<Dependency>>.Succeeded(dependencies);
        }
        
        return Result<List<Dependency>>.Failed(InitializationFailed.Create());
    }

    private Process StartCmdProcess(string processDirectory)
    {
        var processStartInfo = new ProcessStartInfo
        {
            FileName = _isWindows ? "cmd" : "/bin/bash",
            WorkingDirectory = processDirectory,
            RedirectStandardInput = true,
            RedirectStandardOutput = false,
            UseShellExecute = false,
            CreateNoWindow = true
        };
        var process = Process.Start(processStartInfo)!;
        return process;
    }
}